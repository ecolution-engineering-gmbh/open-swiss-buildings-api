# Swiss Buildings API - Final Working Configuration
version: '3.8'

services:
  app:
    image: ghcr.io/ecolution-engineering-gmbh/open-swiss-buildings-api:prod
    environment:
      - APP_ENV=prod
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=postgresql://app:${POSTGRES_PASSWORD}@database:5432/app?serverVersion=16&charset=utf8
      - MEILISEARCH_DSN=http://meilisearch:7700?apiKey=${MEILI_MASTER_KEY}
      - MESSENGER_TRANSPORT_DSN=doctrine://default
      - REGISTRY_DATABASE_REFRESH_ENABLED=true
      - REGISTRY_DATABASE_CH_FILE=/www/var/data/registry_ch.sqlite
      # Configure S6 to continue with web server even if workers fail initially
      - S6_BEHAVIOUR_IF_STAGE2_FAILS=0  # Continue with web server
      - S6_CMD_WAIT_FOR_SERVICES_MAXTIME=90000  # 90 second timeout for DB startup
      - S6_VERBOSITY=1  # Reduce verbosity
      # Database connection wait configuration
      - DATABASE_READY_WAIT=60  # Wait 60 seconds for database before starting workers
      - WORKER_RESTART_DELAY=30  # Delay before restarting failed workers
    depends_on:
      - database
      - meilisearch
    networks:
      - default
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
        window: 120s

  database:
    image: postgis/postgis:16-3.4-alpine
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  meilisearch:
    image: getmeili/meilisearch:v1.13.3
    environment:
      - MEILI_NO_ANALYTICS=true
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_ENV=production
    volumes:
      - meilisearch_data:/meili_data:rw
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  worker-monitor:
    image: docker:cli
    command: |
      sh -c '
        echo "🔄 Worker Monitor starting..."

        # Wait for API to be ready
        while ! wget -q -O- http://app/ping >/dev/null 2>&1; do
          echo "⏳ Waiting for API to be ready..."
          sleep 15
        done

        echo "✅ API is ready!"
        sleep 60  # Wait for full initialization

        # Function to start workers
        start_workers() {
          echo "🚀 Starting workers..."

          # Find app container and start workers
          APP_CONTAINER=$$(docker ps --filter "name=swiss-buildings_app" --format "{{.ID}}" | head -1)

          if [ ! -z "$$APP_CONTAINER" ]; then
            echo "📦 Found app container: $$APP_CONTAINER"

            # Start resolver worker
            docker exec -d $$APP_CONTAINER php bin/console messenger:consume resolve --time-limit=3600 2>/dev/null || echo "⚠️ Failed to start resolver worker"

            # Start async worker
            docker exec -d $$APP_CONTAINER php bin/console messenger:consume async --time-limit=3600 2>/dev/null || echo "⚠️ Failed to start async worker"

            echo "✅ Workers started successfully!"

            # Test resolver functionality
            sleep 10
            if wget -q -O- --post-data="egid\n123456" --header="Content-Type: text/csv" http://app/resolve/building-ids >/dev/null 2>&1; then
              echo "✅ Worker functionality test passed"
            else
              echo "⚠️ Worker functionality test failed"
            fi
          else
            echo "❌ App container not found"
          fi
        }

        # Start workers initially
        start_workers

        # Monitor and restart workers every hour
        while true; do
          sleep 3600  # Wait 1 hour
          echo "🔄 Hourly worker restart..."
          start_workers
        done
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    depends_on:
      - app
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 60s

networks:
  default:
    driver: overlay
    attachable: true

volumes:
  database_data:
    driver: local
  meilisearch_data:
    driver: local

